* lexical bindings
We have to leave this as the first line
  #+begin_src emacs-lisp
    ;;; -*- lexical-binding: t -*-
  #+end_src
* Windows mode
  #+begin_src emacs-lisp
  (setq-default azbyn/windows-mode (string-equal system-type "windows-nt"))
    (when azbyn/windows-mode
      ;; bat file
      ;; set PATH=%PATH%;C:\LegacyApp\Cygwin\3.0.7\bin
      ;; wherever\emacs.exe

      ;; comment me and remember to change init.el
      ;;(setq default-frame-alist
      ;;      (append default-frame-alist '((font . "Consolas")
      ;;                                    (height . 117))))
      ;; </>
      (setq shell-file-name "cmdproxy.exe")
      (setq w32-pass-lwindow-to-system nil
            w32-pass-rwindow-to-system nil
            w32-pass-apps-to-system nil
            w32-lwindow-modifier 'meta ;; Left Windows key
            w32-rwindow-modifier 'meta ;; Right Windows key
            ;; w32-apps-modifier 'hyper ;; Menu key
            )
      ;; (w32-register-hot-key [s-])
      )
  #+end_src
* Theme
** colors
#+BEGIN_SRC emacs-lisp
  (defconst base16-col-base00 "#1D1F21")
  (defconst base16-col-base01 "#282A2E")
  (defconst base16-col-base02 "#373B41")
  (defconst base16-col-base03 "#7E807E")
  (defconst base16-col-base04 "#B4B7B4")
  (defconst base16-col-base05 "#C5C8C6")
  (defconst base16-col-base06 "#E0E0E0")
  (defconst base16-col-base07 "#FFFFFF")
  (defconst base16-col-base08 "#CC342B")
  (defconst base16-col-base09 "#F96A38")
  (defconst base16-col-base0A "#FBA922")
  (defconst base16-col-base0B "#198844")
  (defconst base16-col-base0C "#3971ED")
  ;; (defconst base16-col-base0C "#1296A5")
  (defconst base16-col-base0D "#3971ED")
  (defconst base16-col-base0E "#A36AC7")
  (defconst base16-col-base0F "#FBA922")

  (defvaralias 'base16-col-black   'base16-col-base00)
  (defvaralias 'base16-col-gray    'base16-col-base05)
  (defvaralias 'base16-col-white   'base16-col-base07)
  (defvaralias 'base16-col-red     'base16-col-base08)
  (defvaralias 'base16-col-orange  'base16-col-base09)
  (defvaralias 'base16-col-yellow  'base16-col-base0A)
  (defvaralias 'base16-col-green   'base16-col-base0B)
  (defvaralias 'base16-col-cyan    'base16-col-base0C)
  (defvaralias 'base16-col-blue    'base16-col-base0D)
  (defvaralias 'base16-col-magenta 'base16-col-base0E)
#+END_SRC
** the base16 theme
#+BEGIN_SRC emacs-lisp
    (use-package base16-theme
      :ensure t
      :init
      (setq-default base16-google-dark-colors
                    `(:base00 ,base16-col-base00
                      :base01 ,base16-col-base01
                      :base02 ,base16-col-base02
                      :base03 ,base16-col-base03
                      :base04 ,base16-col-base04
                      :base05 ,base16-col-base05
                      :base06 ,base16-col-base06
                      :base07 ,base16-col-base07
                      :base08 ,base16-col-base08
                      :base09 ,base16-col-base09
                      :base0A ,base16-col-base0A
                      :base0B ,base16-col-base0B
                      :base0C ,base16-col-base0C
                      :base0D ,base16-col-base0D
                      :base0E ,base16-col-base0E
                      :base0F ,base16-col-base0F))
      :config
      (setq-default base16-theme-256-color-source "base16-shell")
      (load-theme 'base16-google-dark t)
      (unless (display-graphic-p)
        (set-face-background 'default "unspecified-bg" (selected-frame)))
  )
#+END_SRC
** ansi colors
   #+begin_src emacs-lisp
     (setq-default ansi-color-names-vector
                   (vector base16-col-black
                           base16-col-red
                           base16-col-green
                           base16-col-yellow
                           base16-col-blue
                           base16-col-magenta
                           base16-col-blue ;; looks better than cyan
                           base16-col-gray
                           ))
   #+end_src
** highlight numbers
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
** highlight escape sequences
#+BEGIN_SRC emacs-lisp
  (use-package highlight-escape-sequences
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'hes-mode)
    (put 'hes-escape-backslash-face 'face-alias 'font-lock-builtin-face)
    (put 'hes-escape-sequence-face 'face-alias 'font-lock-builtin-face))

#+END_SRC
** highlight TODO
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :ensure t)
(global-hl-todo-mode)
#+END_SRC
* diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (diminish 'whitespace-mode)
    (diminish 'flyspell-mode)
    (diminish 'yas-minor-mode)
    (diminish 'yas-mode)
    (diminish 'eldoc-mode)
    (diminish 'hs-minor-mode)
    (diminish 'flyspell-mode "s")
    (diminish 'flymake-mode "fm")
    (diminish 'wucuo-mode "wu")
    (diminish 'flycheck-mode "fc")
    (diminish 'defining-kbd-macro "Macro"))
#+END_SRC
* Basic packages
** yasnippet
   #+begin_src emacs-lisp
   (use-package yasnippet
     :ensure t)
   #+end_src
** flycheck-mode
   #+begin_src emacs-lisp
   (use-package flycheck
     :ensure t)
   #+end_src
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (which-key-mode))
#+END_SRC

** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** Rainbow
   Preview the color when you encounter a hex code
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :init
      (add-hook 'org-mode-hook 'rainbow-mode)
      (add-hook 'emacs-lisp-mode-hook 'rainbow-mode))
#+END_SRC
** expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("M-s" . er/expand-region)
           ("M-S" . er/contract-region)))
#+END_SRC
** common lisp stuff
#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
#+END_SRC
** find file in project
#+BEGIN_SRC emacs-lisp
(use-package find-file-in-project
  :ensure t
  :config
  (setq-default ffip-ignore-filenames
            (remove "*.d" ffip-ignore-filenames)))
#+END_SRC
** ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :ensure t
    :config
     (ranger-override-dired-mode t))
#+END_SRC
** persp mode todo
#+BEGIN_SRC emacs-lisp
  (use-package persp-mode
    :ensure t)
#+END_SRC
** popwin
no more of ruining an entire window split with some buffers
#+BEGIN_SRC emacs-lisp
(use-package popwin
   :ensure t
   :config
   (popwin-mode 1))

#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (require 'smartparens-config))
  (add-hook 'prog-mode-hook 'smartparens-mode)
#+END_SRC
** htmlize
for org mode conversions
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC
** COMMENT mpdel
#+BEGIN_SRC emacs-lisp
  ;; (use-package mpdel
    ;; :ensure t)
  ;; (use-package emms
  ;;   :ensure t
  ;;   :config
  ;;   (require 'emms-setup)
  ;;   (require 'emms-player-mpd)
  ;;   (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
  ;;   (setq emms-seek-seconds 5)
  ;;   (setq emms-player-list '(emms-player-mpd))
  ;;   (setq emms-info-functions '(emms-info-mpd))
  ;;   (setq emms-player-mpd-server-name "localhost")
  ;;   (setq emms-player-mpd-server-port "6600")
  ;;   (emms-player-mpd-connect))
#+END_SRC
* Better defaults
** no scroll bars and stuff
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** no more typing =yes=
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** don't clutter things with backup files
#+BEGIN_SRC emacs-lisp
(defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
(defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
(setq backup-directory-alist (list (cons ".*" backup-dir)))
(setq auto-save-list-file-prefix autosave-dir)
(setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
#+END_SRC

** better scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 999
        scroll-margin 3
        scroll-step 1)
#+END_SRC

** no bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** highlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** lambda becomes Î» among other things
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
  ;;(add-hook 'tex-mode-hook (lambda () (prettify-symbols-mode -1)))
#+END_SRC
** parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)

(use-package rainbow-delimiters
  :ensure t
  :diminish rainbow-delimiters-mode
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

#+END_SRC

** open compressed files
#+BEGIN_SRC emacs-lisp
(auto-compression-mode t)
#+END_SRC
** utf8
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

** line numbers
#+BEGIN_SRC emacs-lisp
  (if (< emacs-major-version 26)
      (defun display-line-numbers-mode()
        (interactive)
        (linum-mode)))
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  ;; (use-package nlinum
  ;;   :ensure t)
  ;; (defun my-nlinum-mode-hook ()
  ;;   (when nlinum-mode
  ;;     (setq-local nlinum-format
  ;;                 (concat " %" (number-to-string
  ;;                              ;; Guesstimate number of buffer lines.
  ;;                              (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
  ;;                         "d"))))
  ;;(add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)
  ;;(defun my-nlinum-mode-hook ()
  ;;  (when nlinum-mode
  ;;   (setq-local nlinum-format
  ;;                (concat " %" (number-to-string
  ;;                             ;; Guesstimate number of buffer lines.
  ;;                             (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))))))

  ;; (add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)

  ;;  (add-hook 'prog-mode-hook 'nlinum-mode)
  ;;  (add-hook 'text-mode-hook 'nlinum-mode)

  ;;(global-display-line-numbers-mode)
#+END_SRC
** disable line numbers for some modes
#+BEGIN_SRC emacs-lisp
;  (defun disable-line-numbers (&optional dummy)
;    (display-line-numbers-mode -1))
;  ;;(add-hook 'neo-tree-mode-hook 'disable-line-numbers)
;  (add-hook 'neo-after-create-hook 'disable-line-numbers)
;  (add-hook 'dashboard-mode-hook 'disable-line-numbers)
;  (add-hook 'dired-mode-hook 'disable-line-numbers)
#+END_SRC
#** electric pairs
#+BEGIN_SRC emacs-lisp
  ;; (setq electric-pair-pairs '(
                             ;; (?\{ . ?\})
                             ;; (?\( . ?\))
                             ;; (?\[ . ?\])
                             ;; (?\" . ?\")
  ;;                            ))
  ;; (  electric-pair-mode t)
#+END_SRC
#** burry, don't kill scratch
# #+BEGIN_SRC emacs-lisp
# (defadvice kill-buffer (around kill-buffer-around-advice activate)
#   (let ((buffer-to-kill (ad-get-arg 0)))
#     (if (equal buffer-to-kill "*scratch*")
#         (bury-buffer)
#       ad-do-it)))
# #+END_SRC
** don't ask about following symlinks
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
** ask for confirmation on close
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
** dired directories first
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-al --group-directories-first")
#+END_SRC
* setup the path
#+BEGIN_SRC emacs-lisp
  (when (file-exists-p "~/.emacs.d/lisp/")
    (add-to-list 'load-path "~/.emacs.d/lisp/")
    ;;add all subdirs from ~/.emacs.d/lisp/
    (let ((default-directory  "~/.emacs.d/lisp/"))
      (normal-top-level-add-subdirs-to-load-path)))
#+END_SRC
# * multi cursors
# #+BEGIN_SRC emacs-lisp
    ;; (use-package multiple-cursors
  ;;     :ensure t
  ;;     :bind
  ;;     ("H-SPC" . set-rectangular-region-anchor))
  ;; (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  ;; (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  ;; (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
# #+END_SRC
# * rmsbolt - compiler explorer like
# #+BEGIN_SRC emacs-lisp
  ;; (use-package rmsbolt
    ;; :ensure t)
# #+END_SRC
* non-melpa packages
** move line
#+BEGIN_SRC emacs-lisp
(require 'move-lines)
(move-lines-binding)
#+END_SRC
** help plus
#+BEGIN_SRC emacs-lisp
(require 'help-fns+)
#+END_SRC
* Whitespace related stuff
** no tabs
#+BEGIN_SRC emacs-lisp
(set-default 'indent-tabs-mode nil)
(set-default 'indicate-empty-lines t)
#+END_SRC
** show tabs and other whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default whitespace-style '(face
                                   trailing
                                   tabs
                                   ;;spaces
                                   space-before-tab
                                   ;space-after-tab
                                   tab-mark
                                   ;;space-mark
                                   ;;lines-tail
                                   ))
  (defun diminished-whitespace-mode ()
    (interactive)
    (whitespace-mode)
    (diminish 'whitespace-mode))
  (add-hook 'prog-mode-hook 'diminished-whitespace-mode)

  (setq-default whitespace-line-column 180)

#+END_SRC
** 4 space indents
#+BEGIN_SRC emacs-lisp
(setq tab-width 4)
#+END_SRC
* Terminal and eshell
** Use zsh by default
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (defadvice ansi-term (before force-bash)
      (interactive (list "/usr/bin/zsh")))

    (ad-activate 'ansi-term))
#+END_SRC
** aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'e 'find-file)
  (defalias 'ef 'find-file)
  (defalias 'es 'eshell)
  (defalias 'eo 'find-file-other-window)
#+END_SRC
** xterm color
#+BEGIN_SRC emacs-lisp
  ;; (use-package xterm-color
  ;;   :ensure t
  ;;   :config
  ;;   (require 'eshell) ; or use with-eval-after-load

  ;;   (add-hook 'eshell-before-prompt-hook
  ;;             (lambda ()
  ;;               (setq xterm-color-preserve-properties t)))
  ;;   (unless (boundp 'eshell-output-filter-functions)
  ;;     (defvar eshell-preoutput-filter-functions nil))
  ;;   ;;(add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
  ;;   ;;(setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
  ;;   (setq-default 'eshell-preoutput-filter-functions 'xterm-color-filter)

  ;;   (setq xterm-color-names
  ;;         (vector base16-col-base00 ; black
  ;;          base16-col-base08 ; red
  ;;          base16-col-base0B ; green
  ;;          base16-col-base0A ; yellow
  ;;          base16-col-base0D ; blue
  ;;          base16-col-base0C ; magenta
  ;;          base16-col-base0E ; cyan
  ;;          base16-col-base05 ; white
  ;;          ))
  ;;   (setq xterm-color-names-bright
  ;;         (vector base16-col-base03 ; black
  ;;          base16-col-base08 ; red
  ;;          base16-col-base0B ; green
  ;;          base16-col-base0A ; yellow
  ;;          base16-col-base0D ; blue
  ;;          base16-col-base0E ; magenta
  ;;          base16-col-base0C ; cyan
  ;;          base16-col-base07 ; white
  ;;         ))
  ;;   (setenv "TERM" "xterm-256color")
  ;;   )
#+END_SRC
** fix my bindings
#+BEGIN_SRC emacs-lisp
  (require 'eshell)
  (defun azbyn/eshell-keys()
    (interactive)
    ;;(define-key

     ;;eshell-mode-map (kbd "C-a") nil)
     ;;(define-key eshell-mode-map (kbd "C-e") nil)
     ;;(define-key eshell-mode-map (kbd "C-q") 'eshell-bol)
     (define-key eshell-mode-map (kbd "M-I") 'eshell-previous-input)
     (define-key eshell-mode-map (kbd "M-J") 'eshell-next-input)

     ;;(define-key eshell-mode-map (kbd "M-p") 'eshell-previous-input)
     ;;(define-key eshell-mode-map (kbd "M-n") 'eshell-next-input)
     (local-set-key (kbd "M-r") 'eshell-previous-input)
     (local-set-key (kbd "M-q") 'eshell-next-input)
     (local-set-key (kbd "M-k") (lambda ()
                                  (interactive)
                                  (eshell-bol)
                                  (kill-line)))
    )
  (add-hook 'eshell-mode-hook 'azbyn/eshell-keys)
  (add-hook 'eshell-mode-hook 'company-mode);; auto-complete-mode)
#+END_SRC
** fish completion
#+BEGIN_SRC emacs-lisp
(unless azbyn/windows-mode
  (use-package fish-completion
    :ensure t
    :config
    (when (and (executable-find "fish")
             (require 'fish-completion nil t))
      (add-hook 'eshell-mode-hook 'fish-completion-mode))))
#+END_SRC
* window numbering
#+BEGIN_SRC emacs-lisp
  (use-package window-numbering
    :ensure t
    :init (window-numbering-mode))
#+END_SRC
* Dashboard
** no more startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** install
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
  ;    (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
      (setq dashboard-items '((recents  . 7)
                              (projects . 5)))
      (setq dashboard-banner-logo-title ""))
#+END_SRC
** show dashboard for new clients
#+BEGIN_SRC emacs-lisp
;;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :init
    (projectile-mode 1))
#+END_SRC
* spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      ;;(setq spaceline-buffer-encoding-abbrev-p nil)
      ;(setq spaceline-line-column-p nil)
      ;(setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (setq spaceline-window-numbers-unicode t)
      (spaceline-toggle-evil-state-off)
      (spaceline-toggle-persp-name-on)
      (spaceline-toggle-window-number-on)
      (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
      (spaceline-spacemacs-theme))
  (unless (display-graphic-p)
    (setq spaceline-window-numbers-unicode nil))

  (spaceline-define-segment azbyn-lines
    "the number of lines"
    (if (eq major-mode 'pdf-view-mode)
        (spaceline--pdfview-page-number)
      (let* ((total-lines (save-excursion
                           (goto-char (point-max))
                           (format-mode-line "%l")))
             (line-num (format-mode-line "%l"))
             (perc (/ (* 100 (string-to-number line-num))
                      (string-to-number total-lines)))
             (col (format-mode-line "%2c")));;%2C
        (format "%s:%s | %3d%%%%" line-num col perc);; total-lines)
        )))

  (spaceline-compile
    ; left side
    '(((persp-name
        workspace-number
        window-number)
       :fallback evil-state
       :face highlight-face
       :priority 100)
      (anzu :priority 95)
      auto-compile
      ((buffer-modified buffer-size buffer-id remote-host)
       :priority 98)
      (major-mode :priority 79)
      (process :when active)
      ((flycheck-error flycheck-warning flycheck-info)
       :when active
       :priority 89)
      (minor-modes :when active
                   :priority 9)
      (mu4e-alert-segment :when active)
      (erc-track :when active)
      ;;(version-control :when active
      ;;                 :priority 78)
      (org-pomodoro :when active)
      (org-clock :when active)
      nyan-cat)
    ; right side
    '(which-function
      (python-pyvenv :fallback python-pyenv)
      (purpose :priority 94)
      (battery :when active)
      (selection-info :priority 95)
      input-method
      ((buffer-encoding-iabbrev
        point-position
        ;;line-column
        ;;num-lines
        azbyn-lines
        )
       :separator " | "
       :priority 96)
      (global :when active)
      ;;(buffer-position :priority 99)
      ;;(hud :priority 99)
      ))
  ;(setq line-number-mode t)
  ;(setq column-number-mode t
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
 (unless azbyn/windows-mode
  (use-package magit
    :ensure t))
#+END_SRC
* neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind ("H-t" . 'neotree-toggle))
#+END_SRC
* Org mode
** macro for emacs-lisp
#+BEGIN_SRC emacs-lisp
  (if (version< org-version "9.2")
      (add-to-list 'org-structure-template-alist
                   '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist
                 '("p" . "src python")))
#+END_SRC
** bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** use the same window for =C-c '=
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** TODO fix my bindings
#+BEGIN_SRC emacs-lisp
  ;;(define-key org-mode-map (kbd "C-a") nil)
  ;;(define-key org-mode-map (kbd "C-e") nil)
  ;;(define-key org-mode-map (kbd "M-h") nil)
  ;(define-key org-mode-map (kbd "M-e") nil)
#+END_SRC
* Custom functions
** sudo edit
#+BEGIN_SRC emacs-lisp
   (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (ido-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC
** reload config
#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/config.org at runtime"
  (interactive)
  (save-some-buffers)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))
  (org-babel-load-file (expand-file-name "~/.emacs.d/keybindings.org"))
  )
#+END_SRC
** edit config
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (defun keybindings-visit ()
    (interactive)
    (find-file "~/.emacs.d/keybindings.org"))
  (defun keybindings-visit-readonly ()
    (interactive)
    (find-file-read-only "~/.emacs.d/keybindings.org"))
  (defun config-visit-readonly ()
    (interactive)
    (find-file-read-only "~/.emacs.d/config.org"))
#+END_SRC
** split and follow
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** smarter paste
#+BEGIN_SRC emacs-lisp
  (defun azbyn/is-image (str)
    (or (string-prefix-p "\x89PNG" str)
        (string-prefix-p "\xff\xd8\xff" str); jpg
        ))

  (defadvice yank (around yank-no-binary activate)
    "Normal yank breaks undo-tree if we paste a png by mistake, so we fix that."
    (unless (and (azbyn/is-image (current-kill 0))
                 (not (y-or-n-p "Clipboard contains an image. Continue?")))
      ad-do-it
    ))

  (defun azbyn/paste ()
    (interactive "")
    (let ((el (first kill-ring)))
      (when (cl-search "\n" el)
        (end-of-line)
        (newline))
      (yank)
      (delete-char 1)
      (backward-char)))

  (defun azbyn/paste-before ()
      (interactive "")
      (let ((el (first kill-ring)))
        (when (cl-search "\n" el)
          ;(forward-line -1)
          (beginning-of-line))
        (yank)))
#+END_SRC
** previous buffer
#+BEGIN_SRC emacs-lisp
(defun er-switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC
** kill-whole-word
#+BEGIN_SRC emacs-lisp
(defun daedreth/kill-inner-word ()
  "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1))
#+END_SRC
** word and subword movement
#+BEGIN_SRC emacs-lisp
  (defun azbyn/subword-char-type (c)
    (let ((type (get-char-code-property c 'general-category)))
      (if (member type '(Lu Lt))
          ?U ;;u for uppercase
        (string-to-char (symbol-name type)))))

  (defun azbyn/char-type (c)
    (if (not c)
        ?Z;;z of null
    (if (member c '(?\( ?\)))
        ?\( ;separate category for parens
      ;; can return (the first letter of)
      ;;Letter, Mark, Number, Punctuation, Symbol, Separator, C (other)
      (let ((type (get-char-code-property c 'general-category)))
        ;;make digits and _ behave like letters
        (if (or (equal type 'Nd) (equal c ?_))
            ?L
            (string-to-char (symbol-name type)))))))
  (defun azbyn/elisp-char-type (c)
    (if (member c '(?- ?/))
        ?L ;make - and / a leter
      (azbyn/char-type c)))
  (defvar azbyn/char-type-function 'azbyn/char-type)

  (setq-local azbyn/char-type-function 'azbyn/elisp-char-type)

  ;;TODO add a skip spaces?
  (defun azbyn/word-begin-impl (char-type-fun move-fun get-char-fun)
    (cl-flet ((char-type (c)
                         (cond
                          ((equal c 10) 'newline)
                          (t (funcall char-type-fun c)))))
      (let ((initial-type (char-type (funcall get-char-fun))))
        (if (equal initial-type 'newline)
            (funcall move-fun)
          (unless (equal (funcall get-char-fun) ?\ )
            (while (equal (char-type (funcall get-char-fun)) initial-type)
              (funcall move-fun)))
          (while (equal (funcall get-char-fun) ?\ );;space
            (funcall move-fun))))))

  (defun azbyn/word-end-impl (char-type-fun move-fun get-char-fun)
    (cl-flet ((char-type (c)
                         (cond
                          ((equal c 10) 'newline)
                          (t (funcall char-type-fun c)))))
      (let ((initial-type (char-type (funcall get-char-fun))))
        (while (equal (funcall get-char-fun) ?\ );;space
          (funcall move-fun))
        (if (equal initial-type 'newline)
            (funcall move-fun)
          (unless (equal (funcall get-char-fun) ?\ )
            (while (equal (char-type (funcall get-char-fun)) initial-type)
              (funcall move-fun))
            ;(while (equal (funcall get-char-fun) ?\ );;space
            ;  (funcall move-fun))
            )))))

  (defun azbyn/forward-word-begin ()
    (interactive)
    (azbyn/word-begin-impl azbyn/char-type-function 'forward-char 'char-after))
  (defun azbyn/forward-word-end ()
    (interactive)
    (azbyn/word-end-impl azbyn/char-type-function 'forward-char 'char-after))
  (defun azbyn/backward-word-end ()
    (interactive)
    (azbyn/word-begin-impl azbyn/char-type-function 'backward-char 'char-before))
  (defun azbyn/backward-word-begin ()
    (interactive)
    (azbyn/word-end-impl azbyn/char-type-function 'backward-char 'char-before))

  (defun azbyn/forward-subword-begin ()
    (interactive)
    (when (member (get-char-code-property (char-after) 'general-category)
                  '(Lu Lt))
      (forward-char))
    (azbyn/word-begin-impl 'azbyn/subword-char-type 'forward-char 'char-after))
  (defun azbyn/forward-subword-end ()
    (interactive)
    (when (member (get-char-code-property (char-after) 'general-category)
                  '(Lu Lt))
      (forward-char))
    (azbyn/word-end-impl 'azbyn/subword-char-type 'forward-char 'char-after))
  (defun azbyn/backward-subword-end ()
    (interactive)
    (azbyn/word-begin-impl 'azbyn/subword-char-type 'backward-char 'char-before)
    (when (member (get-char-code-property (char-before) 'general-category)
                  '(Lu Lt))
      (backward-char)))
  (defun azbyn/backward-subword-begin ()
    (interactive)
    (azbyn/word-end-impl 'azbyn/subword-char-type 'backward-char 'char-before)
    (when (member (get-char-code-property (char-before) 'general-category)
                  '(Lu Lt))
      (backward-char)))

  (defun azbyn/delete-one-char ()
    (interactive)
    (delete-char 1))
  (defun azbyn/delete-one-char-backward ()
    (interactive)
    (delete-char -1))

  (defun azbyn/kill-word ()
    (interactive)
    (azbyn/word-end-impl azbyn/char-type-function 'azbyn/delete-one-char 'char-after))
  (defun azbyn/kill-subword ()
    (interactive)
    (when (member (get-char-code-property (char-after) 'general-category)
                  '(Lu Lt))
      (delete-char 1))
    (azbyn/word-end-impl 'azbyn/subword-char-type 'azbyn/delete-one-char 'char-after))

  (defun azbyn/kill-word-backward ()
    (interactive)
    (azbyn/word-end-impl azbyn/char-type-function 'azbyn/delete-one-char-backward 'char-before))
  (defun azbyn/kill-subword-backward ()
    (interactive)
    ;; (when (member (get-char-code-property (char-after) 'general-category)
    ;;               '(Lu Lt))
    ;;   (delete-char 1))
    (azbyn/word-end-impl 'azbyn/subword-char-type 'azbyn/delete-one-char-backward 'char-before))


  (add-hook 'emacs-lisp-mode-hook
            (lambda () (setq-local azbyn/char-type-function 'azbyn/elisp-char-type)))
#+END_SRC
** copy/kill-*-or-region
#+BEGIN_SRC emacs-lisp
  (defun azbyn/copy-to-eol ()
     (interactive)
     (save-excursion
       (kill-new
        (buffer-substring
         (point)
         (point-at-eol))))
     (message "copied to eol"))
   (defun azbyn/copy-to-eol-or-region ()
     (interactive)
     (if mark-active
         (call-interactively 'kill-ring-save)
       (azbyn/copy-to-eol)))

   (defun azbyn/kill-to-eol-or-region ()
     (interactive)
     (if mark-active
         (call-interactively 'kill-region)
       (kill-line)))
   (defun azbyn/kill-whole-line-or-append-region ()
     (interactive)
     (if mark-active
         (call-interactively 'kill-region)
       ;;(append-next-kill) ;;TODO
       (kill-whole-line)))
  (defun azbyn/delete-char-or-region ()
    (interactive)
    (if mark-active
        (call-interactively 'delete-region)
      (delete-char 1)))
#+END_SRC
** copy word
#+BEGIN_SRC emacs-lisp
  (defun azbyn/copy-whole-subword()
    (interactive)
    (save-excursion
      (forward-char)
       (let ((val (buffer-substring
                   (azbyn/get-point 'azbyn/backward-subword-begin)
                   (azbyn/get-point 'azbyn/forward-subword-end))))
         (message "copied %s" val)
         (kill-new val)
         )))
  (defun azbyn/copy-whole-word()
    (interactive)
    (save-excursion
      (forward-char)
      (let ((val (buffer-substring
                   (azbyn/get-point 'azbyn/backward-word-begin)
                   (azbyn/get-point 'azbyn/forward-word-end))))
         (message "copied %s" val)
         (kill-new val)
         )))

  (defun azbyn/kill-whole-word()
    (interactive)
    (forward-char)
    (kill-region (azbyn/get-point 'azbyn/backward-word-begin)
                 (azbyn/get-point 'azbyn/forward-word-end)))

  (defun azbyn/kill-whole-subword()
    (interactive)
    (forward-char)
    (kill-region (azbyn/get-point 'azbyn/backward-subword-begin)
                 (azbyn/get-point 'azbyn/forward-subword-end)))
#+END_SRC
** nicer delete
#+BEGIN_SRC emacs-lisp
  (defun get-deletion-count (arg)
    "Return the amount of spaces to be deleted, ARG is indentation border."
    (if (eq (current-column) 0) 0
      (let ((result (mod (current-column) arg)))
        (if (eq result 0) arg
          result))))

  (defun backspace-some (arg)
    "Deletes some backspaces, ARG unused."
    (interactive "*P")
    (if (use-region-p) (backward-delete-char-untabify 1)
      (let ((here (point)))
        (if (eq 0 (skip-chars-backward " " (- (point) (get-deletion-count 4))))
            (backward-delete-char-untabify 1)
          (delete-region (point) here)))))
  ;;(setq-default indent-tabs-mode t)
  (add-hook 'prog-mode-hook (lambda ()
                              (interactive)
                              (local-set-key [backspace] 'backspace-some)))
  (setq backward-delete-char-untabify-method 'hungry)
  ;(define-key 'multiple-cursors-mode-)
#+END_SRC
*** nicer delete word
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-backspace>") 'azbyn/kill-word-backward)
  (global-set-key (kbd "<C-M-backspace>") 'azbyn/kill-subword-backward)
  (global-set-key (kbd "<M-backspace>") 'azbyn/kill-subword-backward)
#+END_SRC
** transpose args
#+BEGIN_SRC emacs-lisp
  (defun my-c-transpose-args--forward-to-argsep ()
    "Move to the end of the current c function argument.
  Returns point."
    (interactive)
    (while (progn
             (comment-forward most-positive-fixnum)
             (looking-at "[^,)]"))
      (forward-sexp))
    (point))

  (defun my-c-transpose-args--backward-to-argsep ()
    "Move to the beginning of the current c function argument.
  Returns point."
    (interactive)
    (let ((pt (point))
          cur)
      (up-list -1)
      (forward-char)
      (while (progn
               (setq cur (point))
               (> pt (my-c-transpose-args--forward-to-argsep)))
        (forward-char))
      (goto-char cur)))

  (defun my-c-transpose-args--direction (is_forward)
    "Transpose two arguments of a c-function.
  The first arg is the one with point in it."
    (interactive)
    (let* ((pt-original (point)) ;; only different to pt when not 'is_forward'
           (pt (progn
                 (when (not is_forward)
                   (goto-char (- (my-c-transpose-args--backward-to-argsep) 1))
                   (unless (looking-at ",")
                     (goto-char pt-original)
                     (user-error "Argument separator not found")))
                 (point)))
           (b (my-c-transpose-args--backward-to-argsep))
           (sep (progn
                  (goto-char pt)
                  (my-c-transpose-args--forward-to-argsep)))
           (e (progn
                (unless (looking-at ",")
                  (goto-char pt-original)
                  (user-error "Argument separator not found"))
                (forward-char)
                (my-c-transpose-args--forward-to-argsep)))
           (ws-first (buffer-substring-no-properties
                      (goto-char b)
                      (progn
                        (skip-chars-forward "[[:space:]\n]")
                        (point))))
           (first (buffer-substring-no-properties (point) sep))
           (ws-second (buffer-substring-no-properties
                       (goto-char (1+ sep))
                       (progn
                         (skip-chars-forward "[[:space:]\n]")
                         (point))))
           (second (buffer-substring-no-properties (point) e)))

      (delete-region b e)
      (insert ws-first second "," ws-second first)

      ;; Correct the cursor location to be on the same character.
      (if is_forward
          (goto-char
           (+
            ;; word start.
            (- (point) (length first))
            ;; Apply initial offset within the word.
            (- pt b (length ws-first))))
        (goto-char
         (+
          b (length ws-first)
          ;; Apply initial offset within the word.
          (- pt-original (+ pt 1 (length ws-second))))))))

  (defun my-c-transpose-args-forward ()
    (interactive)
    (my-c-transpose-args--direction t))
  (defun my-c-transpose-args-backward ()
    (interactive)
    (my-c-transpose-args--direction nil))
#+END_SRC
* compile TODO
** project finding functions
*** misc
#+BEGIN_SRC emacs-lisp
  (defun azbyn/expand-name (path &optional current-dir)
    (expand-file-name (or (if (file-name-absolute-p path) path)
                          (let ((r-path path))
                            (setq r-path (substitute-in-file-name r-path))
                            (setq r-path (expand-file-name r-path current-dir))
                            r-path))))
  ;; (defun azbyn/updir (path)
  ;;   (let ((r-path (azbyn/expand-name path)))
  ;;     (if (and (> (length r-path) 0)
  ;;              (equal (substring r-path -1) "/"))
  ;;         (setq r-path (substring r-path 0 -1)))
  ;;     (if (eq (length r-path) 0)
  ;;         (setq r-path "/"))
  ;;     (directory-file-name
  ;;      (file-name-directory r-path))))

  ;; (require 'seq)
  ;; (defun azbyn/project-dir (path &optional pattern)
  ;;   "Find the first directory with a file that matches the pattern"
  ;;   (unless pattern (setq pattern "Makefile"))
  ;;   (if (or (not path) (member path '("/" "/home/azbyn/Projects" "/home/azbyn")))
  ;;       nil
  ;;     (if (seq-contains-p (directory-files path) pattern
  ;;                         (lambda (f _) (string-match-p pattern f)))
  ;;         ;;(member "Makefile" (directory-files path))
  ;;         path
  ;;       (azbyn/project-dir (azbyn/updir path) pattern))))
  (defun azbyn/updir (path)
    "Returns the parent directory of =path=. For \"/\" it returns nil."
    (if (equal path "/")
        nil
      (expand-file-name ".." path)))

  (require 'seq)
  (defun azbyn/project-dir (path &optional pattern)
    "Find the first parent directory with a file that matches the pattern.
     Might or might not end in an infinite loop on /that non-free operating system/.
     (press C-g if that's the case)."
    (unless pattern (setq pattern "Makefile"))
    (if (not path)
        nil
      (if (seq-contains-p (directory-files path) pattern
                          (lambda (f _) (string-match-p pattern f)))
          path
        (azbyn/project-dir (azbyn/updir path) pattern))))
#+END_SRC
*** find root
#+BEGIN_SRC emacs-lisp
  (defun azbyn/find-root (npath)
    (if npath
        (if (file-directory-p npath)
            npath (azbyn/updir npath))
      nil))
#+END_SRC
*** ffip
#+BEGIN_SRC emacs-lisp
  (add-to-list 'ffip-prune-patterns "*/.mypy_cache")
  (defun azbyn/ffip ()
    (interactive)
    ;; find-file-in-project doesn't really work for directories with a
    ;; lot of files
    (if (member (azbyn/find-root (buffer-file-name))
                '(nil "/" "/home/azbyn/Projects" "/home/azbyn"))
        (ivy-switch-buffer)
      (progn
        (find-file-in-project)
        ;(insert-char ?/)
        )))
#+END_SRC
** the function
these may be "overridden" in a sense by other modes
like in latex it would be useful to just run "pdflatex whateverfile.tex"
#+BEGIN_SRC emacs-lisp
  (defun azbyn/compile-project-command (path)
      "create a compile command depending on the directory"
      (cond ((member path '("/" "/home/azbyn/Projects" "/home/azbyn")) nil)
            ((member ".dub" (directory-files path))
             (message "dub build --root '%s'" (directory-files path)))
            ((member "Makefile" (directory-files path))
             (concat "make -C '" path "'"))
            (t (azbyn/compile-project-command (azbyn/updir path)))))
  (defvar azbyn/make-file-function 'compile)
  (defun azbyn/make-file ()
    "This function runs azbyn/make-file"
    (interactive)
    (if (called-interactively-p 'any)     ;To call interactively AND to
                                          ;be able to have elisp-calls
        (call-interactively azbyn/make-file-function)
      (apply azbyn/make-file-function)))

  (make-variable-buffer-local 'azbyn/make-file-function)
  (defvar azbyn/make-thing-function
    (lambda ()
      (interactive)
      (save-buffer)
      (let ((cc (azbyn/compile-project-command
                 (azbyn/find-root (buffer-file-name)))))
        (if cc
            (compile cc)
          ;;(message "thing")
          (azbyn/make-file)
          ))))
  (make-variable-buffer-local 'azbyn/make-thing)
  (defun azbyn/run-make-thing ()
    "This function runs azbyn/make-thing"
    (interactive)
    (if (called-interactively-p 'any)     ;To call interactively AND to
                                          ;be able to have elisp-calls
        (call-interactively azbyn/make-thing-function)
      (apply azbyn/make-thing-function)))
#+END_SRC

* Keep the undo tree even after closing emacs
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :init
    (setq undo-limit 78643200)
    (setq undo-outer-limit 104857600)
    (setq undo-strong-limit 157286400)
    (setq undo-tree-mode-lighter " UN")
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-enable-undo-in-region nil)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (add-hook 'undo-tree-visualizer-mode-hook (lambda ()
                                                (undo-tree-visualizer-selection-mode)
                                                (setq display-line-numbers nil)))
    :config
    (global-undo-tree-mode 1))

#+END_SRC
* ivy and counsel mode
** smex for showing recent commands
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t)
#+END_SRC
** actual install
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-height 12)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    ;; (defun counsel-M-x-no-init()
      ;; (interactive)
      ;; (counsel-M-x ""))
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    ;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    ;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    ;(global-set-key (kbd "C-c g") 'counsel-git)
    ;(global-set-key (kbd "C-c j") 'counsel-git-grep)
    ;(global-set-key (kbd "C-c k") 'counsel-ag)
    ;(global-set-key (kbd "C-x l") 'counsel-locate)
    ;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    )
  (global-set-key (kbd "C-x C-b") 'counsel-switch-buffer)
#+END_SRC
* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (global-set-key "\C-s" 'swiper))
#+END_SRC
** search previous thing
#+BEGIN_SRC emacs-lisp
  (defun azbyn/swiper-search-previous ()
    (interactive)
    (swiper isearch-string))
  (global-set-key (kbd "C-S-s") 'azbyn/swiper-search-previous)
  (global-set-key (kbd "C-M-s") 'azbyn/swiper-search-previous)

#+END_SRC
* evil mode
Don't really use evil mode the conventional way - I just use it for some nice vim functons like =da{= and other things.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t)
   ;(unless (package-installed-p 'evil)
   ; (package-install 'evil))

  ;; Enable Evil
  ;(require 'evil)
#+END_SRC

** emacs state by default
#+BEGIN_SRC emacs-lisp
(setq-default evil-default-state 'emacs)
#+END_SRC

I don't really want to use vim mode ever, so i bind the switch to something hard to reach.
#+BEGIN_SRC emacs-lisp
  (setq-default evil-toggle-key "H-M-C-s-e")
#+END_SRC
** disable some keybindings
#+BEGIN_SRC emacs-lisp
  (define-key evil-visual-state-map (kbd "C-w") nil)
  (define-key evil-motion-state-map (kbd "C-w") nil)
  (define-key evil-emacs-state-map  (kbd "C-z") nil)
  (define-key evil-motion-state-map (kbd "C-z") nil)
  (define-key evil-motion-state-map (kbd "C-b") nil)
  (define-key evil-motion-state-map (kbd "C-f") nil)
  (define-key evil-motion-state-map (kbd "C-o") nil)
  (define-key evil-motion-state-map (kbd "C-e") nil)
  (define-key evil-motion-state-map (kbd "C-y") nil)
  (define-key evil-motion-state-map (kbd "C-i") nil)
  (define-key evil-motion-state-map (kbd "C-u") nil)
  (define-key evil-motion-state-map (kbd "C-d") nil)
  ;;don't start eshell and others in insert mode
  (setq-default evil-insert-state-modes nil)
#+END_SRC

** a nice cursor
#+BEGIN_SRC emacs-lisp
  (setq-default evil-emacs-state-cursor '("#FBA923" box))
  (blink-cursor-mode 0)
#+END_SRC

** finaly enable evil
#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
#+END_SRC
* company mode
also use =C-n=, =C-p= for movement
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :diminish company-mode
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2) ;; so we can enter // comments
      (setq company-selection-wrap-around t)
      (setq company-require-match nil)
      ;(company-tng-configure-default)
  )
    (with-eval-after-load 'company
      (setq company-backends (cons 'company-files
                                   (remove 'company-files company-backends)))
      (define-key company-active-map [escape] 'company-abort)
      (define-key company-active-map (kbd "C-h") nil)
      ;;(define-key company-active-map (kbd "M-n") nil)
      ;;(define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map [C-j] 'company-select-next)
      (define-key company-active-map [C-i] 'company-select-previous)
      (define-key company-active-map (kbd "RET") 'company-complete-selection)
        ;(define-key company-active-map (kbd "SPC") #'company-abort)
      (define-key company-active-map (kbd "SPC") nil)
      )
#+END_SRC
* smartrep
#+BEGIN_SRC emacs-lisp
  (use-package smartrep
    :ensure t
    :config
    (smartrep-define-key
        global-map "C-x"
        '(("<left>" .  previous-buffer)
          ("<right>" . next-buffer))))
#+END_SRC
* winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
  (smartrep-define-key
      winner-mode-map "C-c"
      '(("<left>" . winner-undo)
        ("<right>" . winner-redo)))
#+END_SRC
* server
#+BEGIN_SRC emacs-lisp
  ;; (unless azbyn/windows-mode
  (load "server")
  (unless (server-running-p) (server-start))
#+END_SRC
* quail stuff
#+BEGIN_SRC emacs-lisp
  (require 'russian-transl)
  (require 'azbyn-tex)
  (setq-default default-input-method "azbyn-TeX")
#+END_SRC
* programming languages config
** common
#+BEGIN_SRC emacs-lisp
  (when (require 'so-long nil :noerror)
    (global-so-long-mode 1))

  ;;(global-set-key (kbd "M-m") 'yas-expand)
  ;;(setq compilation-scroll-output t)
  ;;(add-hook 'before-save-hook 'delete-trailing-whitespace)

  (defun prog-hook ()
    (setq tab-width 4)
    (hs-minor-mode)
    (yas-minor-mode))
  (defun azbyn/company-flycheck ()
    (interactive)
    (flycheck-mode)
    (company-mode))

  (add-hook 'prog-mode-hook 'prog-hook)
#+END_SRC
** conf mode
   #+begin_src emacs-lisp

     (defun azbyn/conf-hook ()
       (highlight-numbers-mode)
       (display-line-numbers-mode))
     (add-hook 'conf-unix-mode-hook 'azbyn/conf-hook)

   #+end_src
** comint (*inferior <language>*)
   #+begin_src emacs-lisp
     ;; (define-key comint-mode-map (kbd "M-I") 'comint-previous-input)
     (defun azbyn-comint-hook ()
       (local-set-key (kbd "M-r") 'comint-previous-input)
       (local-set-key (kbd "M-q") 'comint-next-input)
      )
     (add-hook 'comint-mode-hook 'azbyn-comint-hook)

     ;; (define-key comint-mode-map (kbd "M-J") 'comint-next-input)
   #+end_src
** lsp
   #+begin_src emacs-lisp
     (unless azbyn/windows-mode
       (use-package lsp-mode
         :ensure t
         :init
         (setq lsp-prefer-flymake nil)
         :demand t
         :after jmi-init-platform-paths)
       (defun azbyn/lsp-hook ()
         (define-key lsp-mode-map (kbd "<C-return>") 'lsp-execute-code-action)
         (define-key lsp-mode-map (kbd "C-M-g") 'lsp-goto-type-definition);; lsp-execute-code-action)
         (define-key lsp-mode-map (kbd "C-M-b") 'lsp-goto-implementation);; lsp-execute-code-action)
         )
       (add-hook 'lsp-mode-hook 'azbyn/lsp-hook)

       (use-package lsp-ui
         :ensure t
         :config
         (setq lsp-ui-doc-enable nil
               lsp-ui-sideline-enable nil
               ;; lsp-headerline-breadcrumb-enable t ;eh, keep the top thing
               lsp-ui-flycheck-enable t)
         :after lsp-mode)
       ;; auto formatting messes stuff up. best disable it
       (add-hook 'lsp--managed-mode-hook (lambda nil (interactive) (remove-hook 'post-self-insert-hook 'lsp--on-self-insert t)))
       (use-package all-the-icons
         :ensure t)

       (use-package dap-mode
         :ensure t
         :config
         (dap-mode t)
         (dap-ui-mode t)))
   #+end_src
** clang-format
   #+begin_src emacs-lisp
     (use-package clang-format
       :ensure t)
     (setq-default clang-format-fallback-style "llvm")
     (defun azbyn/clang-format-region-or-buffer ()
       (interactive)
       (if mark-active
           (call-interactively 'clang-format-region)
         (clang-format-buffer)))

     (bind-key "<C-M-tab>" 'azbyn/clang-format-region-or-buffer)
   #+end_src
** c-style
#+BEGIN_SRC emacs-lisp
    (diminish 'company-dcd-mode)
     (diminish 'company-dcd-mode)
   (c-add-style "my-style"
               '("stroustrup"
                 (c-basic-offset . 4)
                 (indent-tabs-mode . nil)
                 (c-offsets-alist
                  (inlambda . 0) ; no extra indent for lambda
                  ;; (member-init-intro . '++)
                  (member-init-intro . 8)
                  (innamespace . -))))

  (push '(other . "my-style") c-default-style)
#+END_SRC
** elisp
#+BEGIN_SRC emacs-lisp
  (define-key emacs-lisp-mode-map (kbd "M-q") 'backward-sexp)
  (define-key emacs-lisp-mode-map (kbd "M-r") 'forward-sexp)
  ;(add-hook 'emacs-lisp-mode-hook 'semantic-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
  (add-hook 'emacs-lisp-mode-hook (lambda ()
                                    (interactive)
                                    (flycheck-mode)
                                    ;(with-eval-after-load 'flycheck
                                    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))
                                    (setq-local azbyn/make-thing-function 'eval-last-sexp)))
#+END_SRC
** latex
   #+begin_src emacs-lisp
     (unless azbyn/windows-mode
       (use-package auctex
         :defer t
         :ensure t)
       (use-package company-auctex
         :defer t
         :ensure t)
       (defun azbyn/tex-hook()
         (company-mode)
         (prettify-symbols-mode -1)
         (flycheck-mode))
       (add-hook 'TeX-mode-hook 'azbyn/tex-hook)
       )

   #+end_src
** ptry
#+BEGIN_SRC emacs-lisp
(unless azbyn/windows-mode
  (require 'poetry-mode)
  (add-hook 'poetry-mode-hook 'display-line-numbers-mode))
#+END_SRC
** dlang
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package d-mode
      :ensure t)

    (use-package company-dcd
      :ensure t
      :diminish abbrev-mode
      :diminish company-dcd-mode)

    (add-hook 'd-mode-hook 'company-dcd-mode)
    (add-hook 'd-mode-hook 'flycheck-mode)
    (add-hook 'd-mode-hook (lambda ()
                             (setq azbyn/goto-definition-function
                                   'company-dcd-goto-definition)
                             (setq azbyn/search-symbol-function
                                   'company-dcd-ivy-search-symbol))))
    ;;add ddoc (ie =C-c ?= now) to some keybinding?
#+END_SRC
** rust
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package rust-mode
      :ensure t)
    (use-package company-racer
      :ensure t)
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'company-racer)))
#+END_SRC
** lua
#+BEGIN_SRC emacs-lisp
(unless azbyn/windows-mode
  (use-package lua-mode
    :ensure t
    :defer 1
    )
  ;; (use-package lua-mode
  ;;   :ensure t)
  ;; (setq lua-indent-size 4)
  (add-hook 'lua-mode-hook 'company-mode)
  (add-hook 'lua-mode-hook 'flycheck-mode))
#+END_SRC
** fish
#+BEGIN_SRC emacs-lisp
(unless azbyn/windows-mode
  (use-package fish-mode
    :ensure t))
#+END_SRC
** sh
   #+begin_src emacs-lisp
     (add-hook 'sh-mode-hook 'azbyn/company-flycheck)
   #+end_src
** xmodmap
#+BEGIN_SRC emacs-lisp
 (define-generic-mode 'xmodmap-mode
      '(?!)
      '("add" "clear" "keycode" "keysym" "pointer" "remove")
      nil
      '("[xX]modmap\\(rc\\)?\\'")
      nil
      "Simple mode for xmodmap files.")
#+END_SRC
** nasm
#+BEGIN_SRC emacs-lisp
(unless azbyn/windows-mode
  (use-package nasm-mode
    :ensure t
    :config
    (setq nasm-basic-offset 4)
    (define-key nasm-mode-map (kbd ";") nil)
    (add-to-list 'auto-mode-alist '("\\.asm\\'" . nasm-mode))
    (add-hook 'nasm-mode-hook 'company-mode)
    ))

#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))
  (use-package jedi
    :ensure t)

  (add-hook 'python-mode-hook 'flycheck-mode)
  (add-hook 'python-mode-hook 'company-mode)
  (add-hook 'python-mode-hook 'jedi-mode)
  ;;(add-hook 'python-mode-hook 'jedi:setup)
  (when azbyn/windows-mode
    (setq python-scripts-path (shell-command-to-string "py -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib().replace(r'Lib\\site-packages', 'Scripts\\\\'), end='')\""))
    ;;(setq python-scripts-path "C:/Users/azbyn/AppData/Local/Programs/Python/Python37/Scripts/")
    (setq python-environment-virtualenv (list (concat python-scripts-path "virtualenv.exe")))
    (setq python-shell-interpreter (concat python-scripts-path "ipython.exe"))

    (setq flycheck-python-pycompile-executable "C:/LegacyApp/Python36/python.exe")
    ;; you might have to redefine flycheck-temp-files-writable-p to return only t
    (setq flycheck-python-pylint-executable (concat python-scripts-path "pylint.exe"))
    (setq flycheck-python-mypy-executable (concat python-scripts-path "mypy.exe"))
    )

  (use-package elpy
    :ensure t
    :diminish elpy-mode
    :init
    (setq elpy-modules '(elpy-module-sane-defaults
                         elpy-module-company
                         elpy-module-eldoc
                         ;; elpy-module-flymake
                         ;;elpy-module-highlight-indentation
                         ;; elpy-module-pyvenv
                         elpy-module-yasnippet
                         ;;elpy-module-django
                         ))
    (elpy-enable)
    ;;    (setq elpy-rpc-backend "jedi")
    ;;(add-hook 'python-mode-hook 'company-mode)
    )


  (defun azbyn/python-eval-stmt()
    (interactive)
    (if mark-active
        (elpy-shell-send-region-or-buffer)
      (elpy-shell-send-statement)))

  (define-key elpy-mode-map (kbd "<C-return>") 'azbyn/python-eval-stmt)
  (define-key elpy-mode-map (kbd "<M-return>") 'elpy-shell-send-defun)
  (define-key elpy-mode-map (kbd "<M-S-return>") 'elpy-shell-send-defclass)
  (define-key elpy-mode-map (kbd "<C-S-return>") 'elpy-shell-send-defclass)


  ;;(setq python-shell-interpreter "jupyter"
  ;;    python-shell-interpreter-args "console --simple-prompt"
  ;;    python-shell-prompt-detect-failure-warning nil)
  ;;(add-to-list 'python-shell-completion-native-disabled-interpreters
  ;;           "jupyter")
  (unless azbyn/windows-mode
    (setq python-shell-interpreter "ipython"))
  (setq python-shell-interpreter-args "-i --simple-prompt")

  (setq python-indent-guess-indent-offset t)
  (setq python-indent-guess-indent-offset-verbose nil)
  (diminish 'compilation-shell-minor-mode)

  (setq-default python-indent-offset 4)
  (defun azbyn/python-hook ()
    (local-set-key (kbd "M-c") (lambda ()(interactive)
                                 (compile (format "py \"%s\"" (buffer-file-name)))))
    (local-set-key (kbd "M-v") (lambda () (interactive)
                                 (compile (format "py -m pylint \"%s\"" (buffer-file-name)))))

    (if azbyn/windows-mode
        (setq-local flycheck-disabled-checkers '(python-pylint python-mypy))
      (setq-local flycheck-disabled-checkers '(python-pylint python-mypy))
      )

    (setq azbyn/make-file-function 'elpy-shell-send-buffer)
    (setq prettify-symbols-alist '(("lambda" . 955)))
    (setq azbyn/goto-definition-function 'jedi:goto-definition)
    (setq azbyn/search-symbol-function 'elpy-rgrep-symbol)
    (setq azbyn/repl-name "*Python*"))

  (add-hook 'python-mode-hook 'azbyn/python-hook)
  (setq auto-mode-alist
        (cons '("\\.pylintrc\\'" . conf-unix-mode) auto-mode-alist))

#+END_SRC
** ipython
   #+begin_src emacs-lisp
     (unless azbyn/windows-mode
       (use-package ob-ipython
         :ensure t)
       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
       (setq org-image-actual-width 500))
   #+end_src
** c++
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package irony
      :diminish irony-mode
      :ensure t)
    (use-package irony-eldoc
      :ensure t)
    ;;#define breaks
    (add-hook 'c-mode-hook (lambda () (rainbow-mode -1)))

    ;;i don't like autopairing  for this
    (sp-local-pair '(c-mode c++-mode) "/*" nil :actions :rem)

    ;;(add-hook 'c++-mode-hook 'semantic-mode)
    ;;(add-hook 'c-mode-hook 'semantic-mode)

    (add-hook 'c-mode-hook 'azbyn/remove-sp)
    (add-hook 'c-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'flycheck-mode)

    (add-hook 'c-mode-hook 'irony-mode)
    ;; (add-hook 'c++-mode-hook 'company-mode)
    ;; (add-hook 'c++-mode-hook 'flycheck-mode)

    (defun azbyn/c++-hook ()
      (company-mode)
      (flycheck-mode)
      (irony-mode)
      (irony-eldoc)

      (setq flycheck-clang-language-standard "c++20")
      (when (fboundp 'platformio-conditionally-enable)
        ;;if that's defined we prolly have the whole platformio stuff
        (platformio-conditionally-enable)

        ;;idk why this doesn't work
        (when (projectile-verify-file "platformio.ini")
          (azbyn/platformio-setup)
          )

        ))
    (defun azbyn/platformio-setup ()
      (interactive)
      ;; (setq azbyn/make-file-function 'platformio-upload)
      (local-set-key (kbd "M-c") 'platformio-upload)
      (setq flycheck-clang-include-path
              (list
               (expand-file-name "~/.platformio/packages/toolchain-atmelavr/avr/include/")
               (expand-file-name "~/.platformio/packages/framework-arduino-avr/variants/atmega328pb/")
               "/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/"))
        (setq flycheck-clang-args '("-nostdinc++" "--target=avr"
                                    "-I/usr/share/arduino/hardware/archlinux-arduino/avr/cores/arduino/"
                                    )))

    (add-hook 'c++-mode-hook 'azbyn/c++-hook)

    ;;i don't like having /* autocompleted
                                          ;(define-key c++-mode-map (kbd "*") nil)


    (with-eval-after-load "flycheck"
      (setq flycheck-clang-warnings `(,@flycheck-clang-warnings
                                      "no-pragma-once-outside-header")))
    (with-eval-after-load 'flycheck
      (setq-default flycheck-disabled-checkers
                    '(c/c++-cppcheck c/c++-gcc)))
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode)))
#+END_SRC
** java
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (defun azbyn/java-hook ()
      (setq-local tab-width 4
                  c-basic-offset 4)
      ;; (toggle-truncate-lines 1)
      (setq-local tab-width 4)
      (setq-local c-basic-offset 4)
      (company-mode)
      (flycheck-mode)
      (lsp))
    (add-hook 'java-mode-hook 'azbyn/java-hook)

    (use-package lsp-java
      :ensure t

      :config
      ;; Enable dap-java
      (require 'dap-java)

      ;; Support Lombok in our projects, among other things
      ;; (setq lsp-java-vmargs
      ;;       (list "-noverify"
      ;;             "-Xmx2G"
      ;;             "-XX:+UseG1GC"
      ;;             "-XX:+UseStringDeduplication"
      ;;             (concat "-javaagent:" jmi/lombok-jar)
      ;;             (concat "-Xbootclasspath/a:" jmi/lombok-jar))
      ;;       lsp-file-watch-ignored
      ;;       '(".idea" ".ensime_cache" ".eunit" "node_modules"
      ;;         ".git" ".hg" ".fslckout" "_FOSSIL_"
      ;;         ".bzr" "_darcs" ".tox" ".svn" ".stack-work"
      ;;         "build")

      ;;       lsp-java-import-order '["" "java" "javax" "#"]
      ;;       ;; Don't organize imports on save
      ;;       lsp-java-save-action-organize-imports nil

      ;;       ;; Formatter profile
      ;;       lsp-java-format-settings-url
      ;;       (concat "file://" jmi/java-format-settings-file))


      :demand t
      :after (lsp lsp-mode dap-mode jmi-init-platform-paths)))
#+END_SRC
** haskell
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package haskell-mode
      :ensure t)
    (setq haskell-interactive-popup-errors nil)
    (setq flycheck-ghc-args '("-dynamic"))
    (defun azbyn/haskell-hook ()
      ;;(interactive-haskell-mode)
      (setq-local flycheck-disabled-checkers '(haskell-stack-ghc))

      (company-mode)
      (flycheck-mode))
    ;; TODO proper eval-stmt
    (define-key haskell-mode-map (kbd "<C-return>") 'haskell-interactive-bring)
    (add-hook 'haskell-mode-hook 'azbyn/haskell-hook)
    )
#+END_SRC
** arduino
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package platformio-mode
      :ensure t)
    (use-package arduino-mode
      :ensure t)
    (use-package company-arduino
      :ensure t)
    (add-hook 'arduino-mode-hook 'company-mode)
    (add-hook 'arduino-mode-hook 'flycheck-mode)
    (add-hook 'arduino-mode-home 'azbyn/key-bindings)
    (add-hook 'arduino-mode-hook
              (lambda ()
                ;; (setq azbyn/make-file-function 'arduino-upload)
                (local-set-key (kbd "M-c") 'arduino-upload)
                (setq c-basic-offset 4)
                (setq tab-width 4)
              )))
#+END_SRC

** octave
   #+begin_src emacs-lisp
     (unless azbyn/windows-mode
       (setq auto-mode-alist
             (cons '("\\.m$" . octave-mode) auto-mode-alist))
       (add-hook 'octave-mode-hook 'azbyn/octave-hook)
       (defun azbyn/octave-hook ()
         (company-mode)
         (flycheck-mode)

         (define-key octave-mode-map (kbd "<C-return>") 'octave-send-line)
         (define-key octave-mode-map (kbd "<M-return>") 'octave-send-defun)
         (define-key octave-mode-map (kbd "<M-S-return>") 'octave-send-block)
         (define-key octave-mode-map (kbd "<C-S-return>") 'octave-send-block)
         (define-key octave-mode-map (kbd "C-c C-c") 'octave-send-buffer)
       ))
   #+end_src
** web
   #+begin_src emacs-lisp
   (use-package web-mode
     :ensure t)
   #+end_src
** php
   #+begin_src emacs-lisp
     (unless azbyn/windows-mode
       (use-package php-mode
         :ensure t)
       (defun azbyn/php-hook ()
         (flycheck-mode)
         (company-mode))
       (add-hook 'php-mode-hook 'azbyn/php-hook))
   #+end_src
** groovy
   #+begin_src emacs-lisp
     (use-package groovy-mode
       :ensure t)
     (setq auto-mode-alist
               (cons '("\\.groovy$" . groovy-mode) auto-mode-alist))
     (defun azbyn/groovy-hook ()
          (setq tab-width 4))
     (add-hook 'groovy-mode-hook 'azbyn/groovy-hook)
   #+end_src
** canoe
   #+begin_src emacs-lisp
     (setq auto-mode-alist
                 (cons '("\\.can$" . c-mode) auto-mode-alist))
   #+end_src

** c#
   #+begin_src emacs-lisp
     ;; having syntax highlighting is enough
     (when azbyn/windows-mode
       (when (>= emacs-major-version 26)
         (use-package csharp-mode
           :ensure t)))

     (unless azbyn/windows-mode
       (use-package csharp-mode
         :ensure t)
       (setq auto-mode-alist
             (cons '("\\.csproj$" . xml-mode) auto-mode-alist))



       ;; (defun call-dotnet (&rest args)
       ;;   (make-process :name "run-dotnet"
       ;;                 :buffer nil
       ;;                 :command (cons "dotnet" args)))
       ;; (setq lexical-binding t)
       (defun csharp/new-project ()
         (interactive)
         (let* ((parent-dir (read-directory-name "Parent Directory: "))
                        (proj-name (read-string "Project Name: "))
                        (template (read-string "Template: " "console"))
                        (full-path (expand-file-name proj-name parent-dir)))

         (unless (and (file-directory-p full-path)
                      (not (y-or-n-p (format "Directory %s already exists. Continue? " full-path))))
           (message "Generating '%s'..." full-path)
           (lsp-async-start-process
            (lambda ()
              (message "oi")
              (message "oi '%s'" full-path)
              (let ((f (expand-file-name "Program.cs" full-path)))
                (if (file-exists-p f)
                    (progn
                      (message "Done.")
                      (find-file f))
                  (message "Something went wrong :("))))
            (lambda (why)
              (message "Something went wrong: '%s'" why))
            "dotnet" "new" template "-o" full-path))))

       (defun csharp/run-project ()
         (interactive)
         (let ((dir (azbyn/project-dir (azbyn/find-root buffer-file-name) ".*\\.csproj$")))
           (if dir
               (compile (format "dotnet run -p '%s'" dir))
             (message "Not inside a C# project. (.csproj file not found)"))
           ))

       ;; var not being purple is annoying

       (c-lang-defconst c-type-modifier-kwds
         csharp '("readonly" "new" "var"))
     ;; (c-lang-defconst c-typeless-decl-kwds
     ;;          csharp '("var"))
     ;;        (c-lang-defconst c-other-decl-kwds
     ;;          csharp '("var"))
     ;;        ;;(c-lang-defconst c-type-modifier-kwds
     ;;        ;;  csharp '("readonly" "new" "var"))
     ;;        (c-lang-defconst c-primitive-type-kwds
     ;;          csharp '("bool" "byte" "sbyte" "char" "decimal" "double" "float" "int" "uint"
     ;;                   "long" "ulong" "short" "ushort" "void" "object" "string"))


       (c-lang-defconst c-other-decl-kwds
         csharp '("var"))
       (c-lang-defconst c-modifier-kwds
         csharp '("abstract" "default" "final" "native" "private" "protected"
                  "public" "partial" "internal" "readonly" "static" "event" "transient"
                  "volatile" "sealed" "ref" "out" "virtual" "implicit" "explicit"
                  "fixed" "override" "params" "async" "await" "extern" "unsafe"
                  "get" "set" "this" "const" "delegate"))

       (c-lang-defconst c-primitive-type-kwds
         csharp '("bool" "byte" "sbyte" "char" "decimal" "double" "float" "int" "uint"
                  "long" "ulong" "short" "ushort" "void" "object" "string"))

       (define-key csharp-mode-map (kbd "M-c") 'csharp/run-project)
       (defun azbyn/csharp-hook ()
         (flycheck-mode)
         (company-mode)
         (lsp))
       (add-hook 'csharp-mode-hook 'azbyn/csharp-hook))
   #+end_src
** f#
#+BEGIN_SRC emacs-lisp
  (unless azbyn/windows-mode
    (use-package fsharp-mode
      :defer t
      :ensure t))
#+end_src
** julia
   #+begin_src emacs-lisp
     (unless azbyn/windows-mode
       (use-package julia-mode
         :ensure t))
   #+end_src
** org
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '(
                               (C . t)
                               (octave . t)
                               (python . t)
                               ;;(ipython . t)
                               ))
  (setq org-confirm-babel-evaluate nil)
  (defun azbyn/org-hook ()
    (setq-local azbyn/make-thing-function 'org-latex-export-to-pdf)
    ;; (add-to-list 'org-latex-minted-langs '(ipython "python"))
    (hl-todo-mode))

  (add-hook 'org-mode-hook 'azbyn/org-hook)


  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
* irc
  #+begin_src emacs-lisp
    (unless azbyn/windows-mode
      (defun azbyn/irc ()
        (interactive)
        (let ((pass (read-passwd "IRC Password: ")))
          ;; (erc :server "localhost"
          ;;      :nick "azbyn"
          ;;      :password pass)
      
          (rcirc-connect "localhost"
                         6667
                         "azbyn";;nick
                         "azbyn";;user name
                         "azbyn";;full name
                         '();;startup channels
                         pass
                         ;;encryption
                         )

          ))
  
      (with-eval-after-load 'rcirc
        (defun-rcirc-command sv (arg)
          "Boast about rcirc."
          (interactive "i")
          (rcirc-send-message process target
                              (concat "I use \r\nhardbass\r\n"))))


      ;; (setq rcirc-default-user-name "azbyn")
      ;; (setq rcirc-server-alist
      ;;       '(("localhost"
      ;;          :port 6667
      ;;          :user-name "azbyn"
      ;;          :channels ("&bitlbee" "#sheep-test"))
      ;;         ))
      ;; (setq rcirc-authinfo
      ;;       '(("bitlbee" bitlbee "azbyn" "Termopile1")))

      )
  #+end_src
* webkit
  #+begin_src emacs-lisp
    (unless (version< emacs-version "28.0")
      (require 'webkit)
      (global-set-key (kbd "H-r") 'webkit) ;; Bind to whatever global key binding you want if you want
      (require 'webkit-ace) ;; If you want link hinting
      (require 'webkit-dark) ;; If you want to use the simple dark mode
      (setq webkit-dark-mode t)
      (modify-frame-parameters nil '((inhibit-double-buffering . t))))
  #+end_src

